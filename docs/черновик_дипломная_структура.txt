Профессиональное образовательное учреждение частное 
«Колледж менеджмента»


Специальность_________________________________________________
(полное наименование специальности в соответствии с ФГОС)

ДИПЛОМНАЯ РАБОТА

по __________________________________________________________________
(учебная дисциплина либо междисциплинарный курс)

Тема: "Разработка веб-приложения для поиска исполнителей и заказчиков проектов"


Студента(ки)________________________________________________________
(ФИО в родительном падеже) 
____________________________отделения _________ курса группа _________
(очно-заочное либо заочное)

______________________________20___г.
дата сдачи работы
____________________________________
подпись студента
     Преподаватель 
____________________________________
фамилия, инициалы
____________________________________
подпись преподавателя
______________________________20___г.

     Оценка_____________________________




Архангельск 2025
СОДЕРЖАНИЕ

Введение	3
1 Анализ и разработка требований к веб-приложению для поиска исполнителей и заказчиков проектов	6
1.1 Назначение и область применения	6
1.2 Постановка задачи	6
1.3 Описание алгоритма функционирования веб-приложения	7
1.4 Обоснование выбора программного обеспечения	7
2 Проектирование веб-приложения для поиска исполнителей и заказчиков проектов	9
2.1 Проектирование причинно-следственной диаграммы	9
2.2 Проектирование DFD-диаграмм первого и второго уровня	10
2.3 Проектирование UML-диаграмм стереотипов	12
2.4 Проектирование прототипа веб-приложения	14
3 Проектирование и разработка базы данных для веб-приложения (при наличии)	15
3.1 Проектирование базы данных	15
3.2 Разработка базы данных	18
3.3 Подключение базы данных к веб-приложению	19
4 Разработка веб-приложения для поиска исполнителей и заказчиков проектов	21
4.1 Разработка пользовательского интерфейса	21
4.2 Разработка функционала веб-приложения	23
4.3 Создание инсталляционного ПО	25
5 Спецификация программы	27
6 Тестирование веб-приложения	29
7 Руководство пользователя	32
7.1 Общие сведения	32
7.2 Инструкция по работе	32
8 Руководство администратора (при наличии)	34
9 Организация охраны труда и техника безопасности	36
9.1 Требования охраны труда при работе с ПК	36
9.2 Техника безопасности при работе с ПК	37
Заключение	38
Список использованных источников	39

Введение

В современном мире информационные технологии активно развиваются и интегрируются в различные сферы деятельности, включая бизнес и предпринимательство. В последние годы наблюдается значительный рост фриланс-индустрии и удаленной работы, что требует создания специализированных платформ для взаимодействия между заказчиками и исполнителями проектов.

Веб-приложения для поиска исполнителей и заказчиков проектов имеют ряд преимуществ перед традиционными методами поиска работы:

• глобальность. Использование веб-платформ позволяет заказчикам находить исполнителей по всему миру, а фрилансерам работать с клиентами из разных стран,
• доступность. Веб-приложения доступны 24/7 из любой точки мира при наличии интернет-соединения,
• эффективность. Платформы автоматизируют процессы поиска, отбора и взаимодействия между участниками,
• прозрачность. Системы рейтингов и отзывов обеспечивают доверие между сторонами.

Актуальность работы: в настоящее время фриланс-рынок активно развивается. По данным исследований, количество фрилансеров в мире превышает 1.5 миллиарда человек, а объем рынка фриланс-услуг составляет более 1 триллиона долларов. Веб-приложения для поиска исполнителей и заказчиков проектов становятся неотъемлемой частью современной экономики, обеспечивая гибкость трудовых отношений и возможности для удаленной работы.

В настоящее время существует множество платформ для фриланса, однако многие из них имеют недостатки:

• сложность интерфейса. Многие платформы имеют перегруженный и неинтуитивный интерфейс,
• высокие комиссии. Некоторые платформы взимают значительные комиссии с пользователей,
• недостаточная защита. Проблемы с безопасностью платежей и защитой интеллектуальной собственности.

Цель данного дипломного проекта заключается в создании веб-приложения CollabHub, которое поможет заказчикам находить квалифицированных исполнителей, а фрилансерам - интересные проекты. Веб-приложение будет упрощать процесс поиска и взаимодействия между участниками рынка фриланс-услуг.

Веб-приложение CollabHub будет включать в себя следующие компоненты:

• система регистрации и авторизации пользователей,
• каталог проектов с возможностью поиска и фильтрации,
• система откликов и управления заявками,
• встроенная система сообщений для общения,
• система рейтингов и отзывов,
• управление профилями пользователей.

Веб-приложение будет обладать современным и интуитивно понятным интерфейсом, адаптированным для различных устройств.

Разработка веб-приложения CollabHub позволит повысить эффективность взаимодействия между заказчиками и исполнителями проектов, создав удобную и безопасную платформу для сотрудничества.

Для реализации поставленной цели необходимо решить следующие задачи:

• анализ существующих решений и определение требований к системе,
• проектирование архитектуры веб-приложения: определение компонентов, выбор технологий, разработка схемы базы данных,
• разработка пользовательского интерфейса и пользовательского опыта,
• реализация функционала веб-приложения, включая API, систему аутентификации, управление данными,
• тестирование приложения на корректность, производительность и безопасность,
• развертывание и настройка производственной среды.

1 Анализ и разработка требований к веб-приложению для поиска исполнителей и заказчиков проектов

1.1 Назначение и область применения

Разрабатываемый программный продукт является веб-приложением CollabHub для поиска исполнителей и заказчиков проектов. Веб-приложение предназначено для создания платформы взаимодействия между заказчиками проектов и фрилансерами. Разрабатываемое приложение представляет собой веб-платформу, позволяющую:

• регистрироваться и авторизоваться в системе,
• создавать и просматривать проекты,
• подавать отклики на проекты,
• общаться через встроенную систему сообщений,
• управлять профилями и портфолио,
• оставлять отзывы и рейтинги.

Пользователями этого веб-приложения будут являться заказчики проектов, фрилансеры, а также компании, ищущие удаленных сотрудников.

1.2 Постановка задачи

Разрабатываемое веб-приложение должно предоставлять функционал для поиска и взаимодействия между заказчиками и исполнителями проектов. Также в приложении нужно предусмотреть возможность создания проектов, подачи откликов, общения между участниками и оценки качества выполненной работы.

Исходя из вышеизложенного, приложение должно выполнять следующие задачи:

• иметь интуитивно понятный веб-интерфейс с адаптивным дизайном,
• предоставлять систему регистрации и авторизации пользователей с ролями (заказчик/фрилансер),
• обеспечивать создание, редактирование, просмотр и удаление проектов,
• предоставлять возможность подачи откликов на проекты и управления заявками,
• включать систему сообщений для общения между пользователями,
• предоставлять функционал оценки и отзывов за выполненные работы,
• обеспечивать управление профилями и портфолио пользователей,
• включать систему комментариев к проектам.

Веб-приложение должно состоять из набора страниц и компонентов. На главной странице необходимо разместить каталог проектов с возможностью поиска и фильтрации, а также навигационное меню для доступа к различным разделам:

• просмотр и создание проектов,
• управление откликами,
• система сообщений,
• управление профилем.

При выборе проекта пользователь должен иметь возможность просмотреть детальную информацию и подать отклик (для фрилансеров) или управлять откликами (для заказчиков).

1.3 Описание алгоритма функционирования веб-приложения

Данное веб-приложение состоит из следующих основных модулей:

• модуль аутентификации и авторизации (login, register, logout),
• модуль управления проектами (создание, редактирование, просмотр, удаление),
• модуль системы откликов (подача откликов, управление заявками),
• модуль системы сообщений (чат между пользователями),
• модуль управления профилями (редактирование профиля, портфолио),
• модуль системы рейтингов и отзывов (оценка выполненных работ),
• модуль комментариев к проектам.

Веб-приложение CollabHub развертывается на веб-сервере и доступно через браузер. Данные хранятся в базе данных SQLite, а файлы (аватары, портфолио) сохраняются в файловой системе сервера.

1.4 Обоснование выбора программного обеспечения

Процесс разработки требует выбора необходимого технического и программного обеспечения.

Для проектирования диаграмм был использован интернет-сервис draw.io. Данный сервис имеет ряд преимуществ:

• возможность проектировать различные виды диаграмм с сохранением в облачном хранилище,
• большое количество шаблонов для проектирования диаграмм.

В качестве языка программирования выбран Python с фреймворком FastAPI, так как он обеспечивает высокую производительность, простоту разработки и встроенную поддержку современного веб-API. Для фронтенда используется HTML5, CSS3 и JavaScript с фреймворком Tailwind CSS для создания современного адаптивного интерфейса.

Для разработки приложения используется интегрированная среда разработки Visual Studio Code, которая имеет следующие преимущества:

• поддержка множества языков программирования,
• встроенная поддержка Git,
• богатая экосистема расширений.

Минимальные системные требования для работоспособности веб-приложения CollabHub:

• операционная система Windows 10/Linux/macOS,
• Python 3.8 и выше,
• процессор с тактовой частотой 2.0 ГГц и выше,
• оперативная память минимум 4 ГБ,
• объем свободного места на жестком диске не менее 1 ГБ.

2 Проектирование веб-приложения для поиска исполнителей и заказчиков проектов

2.1 Проектирование причинно-следственной диаграммы

Причинно-следственная диаграмма – инструмент, позволяющий выявить наиболее существенные причины, влияющие на конечный результат. На рисунке 1 изображена причинно-следственная диаграмма веб-приложения CollabHub.

Рисунок 1 – Веб-приложение CollabHub. Диаграмма причинно-следственная

На данной диаграмме отражены основные причинно-следственные связи в веб-приложении CollabHub:

**Основные субъекты:**
• Заказчик проектов
• Фрилансер (исполнитель)
• Система CollabHub

**Ключевые причинно-следственные связи:**

1. **Причина:** Необходимость в выполнении проекта
   **Следствие:** Заказчик регистрируется в системе и создает проект

2. **Причина:** Поиск работы/проектов
   **Следствие:** Фрилансер регистрируется в системе и создает профиль

3. **Причина:** Заинтересованность в проекте
   **Следствие:** Фрилансер подает отклик на проект

4. **Причина:** Получение откликов от фрилансеров
   **Следствие:** Заказчик выбирает исполнителя и начинает сотрудничество

5. **Причина:** Необходимость общения в процессе работы
   **Следствие:** Использование системы сообщений между участниками

6. **Причина:** Завершение проекта
   **Следствие:** Оставление отзывов и обновление рейтингов

**Основные данные системы:**
• Профили пользователей (заказчики и фрилансеры)
• Проекты с описанием и требованиями
• Отклики и заявки на проекты
• Сообщения между пользователями
• Отзывы и рейтинги

2.2 Проектирование DFD-диаграмм первого и второго уровня

Для полного описания движения данных внутри приложения спроектированы DFD диаграммы первого и второго уровня.

DFD-диаграмма (диаграмма потока данных) – методология графического структурного анализа, описывающая внешние по отношению к системе источники и адресаты данных, логические функции, потоки данных и хранилища данных. Цель DFD представления – продемонстрировать, как каждый процесс преобразует свои входные данные в выходные, а также выявить отношения между этими процессами.

На рисунке 2 изображена DFD-диаграмма первого уровня веб-приложения CollabHub.

Рисунок 2 – Веб-приложение CollabHub. DFD-диаграмма первого уровня

Пользователь взаимодействует с веб-интерфейсом, который обрабатывает запросы и взаимодействует с базой данных для получения и сохранения информации.

На рисунке 3 изображена DFD-диаграмма второго уровня веб-приложения CollabHub.

Рисунок 3 – Веб-приложение CollabHub. DFD-диаграмма второго уровня

На данной диаграмме показано, что пользователь взаимодействует с веб-приложением через браузер, обращаясь к различным страницам и функциям приложения. Система обрабатывает запросы, взаимодействует с базой данных и файловой системой для получения и сохранения данных.

2.3 Проектирование UML-диаграмм стереотипов

UML (Unified Modeling Language) – язык графического описания для объектного моделирования в области разработки программного обеспечения. Используя UML, разработчики могут создавать диаграммы классов, диаграммы вариантов использования, диаграммы последовательностей и другие виды диаграмм.

UML-диаграммы стереотипов используются для создания новых элементов моделирования, получаемых из существующих, но имеющих определенные свойства, которые подходят для конкретной проблемы предметной области.

На рисунке 4 представлена UML-диаграмма стереотипов веб-приложения CollabHub.

Рисунок 4 – Веб-приложение CollabHub. UML-диаграмма стереотипов

На данной диаграмме показано, что пользователь может взаимодействовать со следующими основными компонентами системы:

• модуль управления проектами,
• модуль системы откликов,
• модуль системы сообщений,
• модуль управления профилями.

2.4 Проектирование прототипа веб-приложения

Прототип – модель, прообраз конечного продукта. Для описания прототипа веб-приложения CollabHub выбрана интерактивная модель. Интерактивный прототип представляет собой схематичное изображение пользовательского интерфейса с возможностью взаимодействия.

На рисунке 5 представлен прототип главной страницы веб-приложения CollabHub.

Рисунок 5 – Веб-приложение CollabHub. Прототип главной страницы

3 Проектирование и разработка базы данных для веб-приложения

3.1 Проектирование базы данных

Для веб-приложения CollabHub была спроектирована реляционная база данных SQLite, включающая следующие основные таблицы:

• Users – таблица пользователей (заказчики и фрилансеры),
• Jobs – таблица проектов,
• Applications – таблица откликов на проекты,
• Messages – таблица сообщений между пользователями,
• Reviews – таблица отзывов и рейтингов.

Схема базы данных обеспечивает нормализацию данных и исключает дублирование информации.

3.2 Разработка базы данных

База данных была реализована с использованием SQLite. Созданы все необходимые таблицы с соответствующими полями, индексами и ограничениями целостности. Реализованы функции для работы с базой данных, включая CRUD операции для всех сущностей.

3.3 Подключение базы данных к веб-приложению

База данных подключается к веб-приложению через модуль database.py, который обеспечивает установление соединения и выполнение SQL-запросов. Реализована система миграций для обновления структуры базы данных.

4 Разработка веб-приложения для поиска исполнителей и заказчиков проектов

4.1 Разработка пользовательского интерфейса

Пользовательский интерфейс разработан с использованием HTML5, CSS3 и JavaScript. Применен фреймворк Tailwind CSS для создания современного адаптивного дизайна. Интерфейс адаптирован для различных устройств и разрешений экрана.

4.2 Разработка функционала веб-приложения

Функционал веб-приложения реализован с использованием фреймворка FastAPI. Созданы API endpoints для всех основных операций:

• аутентификация и авторизация пользователей,
• управление проектами,
• система откликов,
• система сообщений,
• управление профилями.

4.3 Создание инсталляционного ПО

Для развертывания приложения создан Docker-контейнер, который включает все необходимые зависимости и настройки. Настроен процесс автоматического развертывания на платформе Render.com.

5 Спецификация программы

Рекомендуемые системные требования для использования веб-приложения CollabHub:

• операционная система Windows 10/Linux/macOS,
• Python 3.8 и выше,
• процессор с тактовой частотой 2.0 ГГц и выше,
• оперативная память минимум 4 ГБ,
• объем свободного места на жестком диске не менее 1 ГБ.

Исполняемый файл веб-приложения CollabHub имеет название main.py. Помимо основного файла в проект включены файлы, описанные в таблице 1.

Таблица 1 – Описание файлов, входящих в проект
Обозначение	Наименование	Применение
main.py	Основной файл приложения	Содержит FastAPI приложение и все маршруты
models.py	Модуль моделей	Содержит функции для работы с базой данных
database.py	Модуль базы данных	Содержит функции подключения к БД и инициализации
utils.py	Утилиты	Вспомогательные функции
requirements.txt	Зависимости	Список необходимых Python пакетов
Dockerfile	Контейнер	Конфигурация для Docker
docker-compose.yml	Композиция	Настройки для Docker Compose
render.yaml	Деплой	Конфигурация для развертывания на Render

Помимо данных файлов в проекте используются файлы в формате HTML для шаблонов, CSS для стилей и JavaScript для интерактивности.

6 Тестирование веб-приложения

Функциональное тестирование – это тестирование ПО в целях проверки реализуемости функциональных требований. В качестве метода тестирования выбран метод «черного ящика», так как тестирование проводится с позиции конечного пользователя.

В результате разработки веб-приложения было проведено полное тестирование программного продукта, включающее:

• тестирование системы регистрации и авторизации пользователей,
• тестирование создания, редактирования, просмотра и удаления проектов,
• тестирование системы откликов и управления заявками,
• тестирование системы сообщений и чата между пользователями,
• тестирование системы рейтингов и отзывов,
• тестирование управления профилями и портфолио,
• тестирование системы комментариев к проектам,
• тестирование пользовательского интерфейса и адаптивности.

Все тесты прошли успешно, ошибок не выявлено.

7 Руководство пользователя

7.1 Общие сведения

Веб-приложение CollabHub предоставляет возможность поиска исполнителей и заказчиков проектов, создания проектов, подачи откликов и общения между участниками. Приложение дает пользователям возможность эффективно взаимодействовать в рамках фриланс-рынка.

7.2 Инструкция по работе

Для использования приложения необходимо открыть веб-браузер и перейти по адресу приложения. После регистрации пользователь получает доступ ко всем функциям платформы в соответствии со своей ролью (заказчик или фрилансер).

Основные функции:
• регистрация и авторизация с выбором роли (заказчик/фрилансер),
• создание, редактирование, просмотр и удаление проектов,
• подача откликов на проекты и управление заявками,
• общение через систему сообщений и чат,
• управление профилем, портфолио и аватаром,
• оставление отзывов и оценок за выполненные работы,
• комментирование проектов,
• просмотр профилей других пользователей.

8 Руководство администратора (при наличии)

Веб-приложение CollabHub включает функции административного управления системой. Администратор имеет доступ к следующим функциям:

• управление пользователями системы,
• модерация проектов и откликов,
• управление системными настройками,
• просмотр статистики использования платформы,
• управление базой данных.

Для доступа к административным функциям необходимо иметь соответствующие права доступа в системе.

9 Организация охраны труда и техника безопасности

9.1 Требования охраны труда при работе с ПК

При работе с веб-приложением необходимо соблюдать требования охраны труда при работе с компьютером, включая правильную организацию рабочего места, соблюдение режима работы и использование эргономичного оборудования.

9.2 Техника безопасности при работе с ПК

Необходимо соблюдать правила техники безопасности при работе с компьютерной техникой, включая правильное подключение оборудования, соблюдение температурного режима и защиту от электромагнитного излучения.

Заключение

В ходе выполнения дипломного проекта создано веб-приложение CollabHub для поиска исполнителей и заказчиков проектов.

Целью дипломного проекта является разработка веб-приложения, включающего в себя систему управления проектами, откликами, сообщениями и профилями пользователей.

В ходе реализации поставленной цели изучены особенности современных веб-приложений и фреймворков. Выполнен анализ предметной области, на основании которого подобраны технологии разработки и архитектура системы.

Для достижения поставленной цели были решены следующие задачи:

• выбрана тема веб-приложения,
• спроектирована архитектура приложения: определена структура базы данных, выбраны технологии, разработан пользовательский интерфейс,
• разработана архитектура системы для ее реализации,
• написан программный код веб-приложения, включая API, интерфейс, функциональные модули, управление данными,
• приложение протестировано на корректность, производительность и безопасность,
• успешно развернуто и используется веб-приложение.

Разработанное веб-приложение CollabHub обеспечивает удобное взаимодействие между заказчиками и исполнителями проектов, а также предоставляет все необходимые инструменты для эффективной работы на фриланс-рынке. Приложение имеет современный интуитивно-понятный интерфейс.

В процессе тестирования веб-приложения CollabHub ошибок не выявлено, приложение функционирует корректно.

Список использованных источников

1. FastAPI Documentation [Электронный ресурс] // Режим доступа: https://fastapi.tiangolo.com/ - свободный
2. Python Documentation [Электронный ресурс] // Режим доступа: https://docs.python.org/3/ - свободный
3. SQLite Documentation [Электронный ресурс] // Режим доступа: https://www.sqlite.org/docs.html - свободный
4. Tailwind CSS Documentation [Электронный ресурс] // Режим доступа: https://tailwindcss.com/docs - свободный
5. Docker Documentation [Электронный ресурс] // Режим доступа: https://docs.docker.com/ - свободный
6. Render Documentation [Электронный ресурс] // Режим доступа: https://render.com/docs - свободный
7. HTML5 Specification [Электронный ресурс] // Режим доступа: https://html.spec.whatwg.org/ - свободный
8. CSS3 Specification [Электронный ресурс] // Режим доступа: https://www.w3.org/Style/CSS/ - свободный
9. JavaScript Documentation [Электронный ресурс] // Режим доступа: https://developer.mozilla.org/en-US/docs/Web/JavaScript - свободный
10. Web Development Best Practices [Электронный ресурс] // Режим доступа: https://web.dev/ - свободный
