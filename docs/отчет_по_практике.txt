Профессиональное образовательное учреждение частное
«Колледж менеджмента»


Отчет по производственной практике
ПП. 02 Осуществление интеграции программных модулей

по ПМ.02 Осуществление интеграции программных модулей


Специальность 09.02.07 «Информационные системы и программирование»

Сроки прохождения практики:
с «25» октября 2025 г. по «15» ноября 2025 г.

Место практики: ПОУЧ «Колледж менеджмента»


Выполнил:	студент 4 курса, 
группы 22/ИСиП/О-З
Коваленко М. В.
_________________
(подпись)


Проверил:	преподаватель
Быков Михаил 
Николаевич
_________________
(оценка)
_________________
(подпись, дата)





Архангельск 2025

СОДЕРЖАНИЕ

Перечень сокращений и обозначений	3
Введение	4
1 Анализ и разработка требований к веб-приложению CollabHub	6
1.1 Назначение и область применения	6
1.2 Постановка задачи	6
1.3 Анализ предметной области	8
1.4 Обоснование выбора программного обеспечения	10
2 Проектирование архитектуры веб-приложения	13
2.1 Проектирование причинно-следственной диаграммы	13
2.2 Проектирование DFD-диаграмм первого и второго уровня	14
2.3 Проектирование UML-диаграмм стереотипов	16
2.4 Проектирование прототипа пользовательского интерфейса	18
3 Проектирование базы данных для веб-приложения	21
3.1 Анализ требований к базе данных	21
3.2 Проектирование структуры базы данных	23
3.3 Выбор технологии для работы с базой данных	26
4 Техническое обеспечение реализации проекта	29
4.1 Выбор технологий разработки	29
4.2 Архитектурные решения	32
4.3 Планирование этапов реализации	34
Заключение	38
Список использованных источников	40
Приложение	41

ПЕРЕЧЕНЬ СОКРАЩЕНИЙ И ОБОЗНАЧЕНИЙ

БД – база данных
СУБД – система управления базой данных
API (Application Programming Interface) — программный интерфейс приложения
REST (Representational State Transfer) – архитектурный стиль взаимодействия компонентов распределённого приложения
GUI (Graphic User Interface) – графический пользовательский интерфейс
JWT (JSON Web Token) – стандарт для создания токенов доступа
SQLite – встраиваемая реляционная база данных
FastAPI – современный веб-фреймворк для создания API
HTML – язык гипертекстовой разметки
CSS – каскадные таблицы стилей
JS – JavaScript, язык программирования
Tailwind CSS – фреймворк для CSS

ВВЕДЕНИЕ

В современном мире фриланс-индустрия активно развивается, и большое количество людей выбирают удаленную работу и фриланс как основной вид занятости. По данным исследований, количество фрилансеров в мире превышает 1.5 миллиарда человек, а объем рынка фриланс-услуг составляет более 1 триллиона долларов. Веб-приложения для поиска исполнителей и заказчиков проектов становятся неотъемлемой частью современной экономики, обеспечивая гибкость трудовых отношений и возможности для удаленной работы.

Темой дипломной работы является «Разработка веб-приложения для поиска исполнителей и заказчиков проектов» (CollabHub). Практика направлена на разработку веб-приложения, включающего в себя систему управления проектами, откликами, сообщениями, профилями пользователей и административные функции для модерации контента.

Актуальность разработки веб-приложения CollabHub обусловлена следующими факторами:

‒ рост популярности фриланса. Всё большее количество людей выбирают удаленную работу и фриланс как основной или дополнительный источник дохода,
‒ необходимость в специализированных платформах. Существующие платформы часто имеют перегруженный интерфейс или взимают высокие комиссии,
‒ потребность в безопасном и удобном взаимодействии. Необходимы инструменты, которые обеспечивают прозрачность и защиту интересов обеих сторон.

Целью прохождения производственной практики является изучение процесса проектирования и разработки требований к веб-приложению для поиска исполнителей и заказчиков проектов, включающего систему управления проектами и связанными компонентами, а также анализ технологических решений и архитектурных подходов для реализации данного проекта.

Практика проходила на базе ПОУЧ «Колледж менеджмента» с 25 октября 2025 г. по 15 ноября 2025 г. Общая продолжительность составила 108 учебных часов.

В рамках производственной практики были выполнены следующие задачи:

‒ проведен анализ предметной области и изучены существующие решения для фриланс-рынка,
‒ определены функциональные и нефункциональные требования к веб-приложению,
‒ выбраны и обоснованы технологии и инструменты разработки,
‒ спроектирована архитектура системы, включая структуру базы данных,
‒ разработаны диаграммы процессов, данных и взаимодействия компонентов,
‒ спроектирован пользовательский интерфейс и определена структура страниц,
‒ определены подходы к реализации и план этапов разработки.

Результатом практики стал полный анализ требований и техническое проектирование веб-приложения CollabHub для поиска исполнителей и заказчиков проектов, а также выбор оптимальных технологических решений для его реализации.

1 АНАЛИЗ И РАЗРАБОТКА ТРЕБОВАНИЙ К ВЕБ-ПРИЛОЖЕНИЮ COLLABHUB

1.1 Назначение и область применения

Разрабатываемый программный продукт является веб-приложением «CollabHub» для поиска исполнителей и заказчиков проектов. Веб-приложение предназначено для создания платформы взаимодействия между заказчиками проектов и фрилансерами. Разрабатываемое приложение представляет собой веб-платформу, позволяющую:

‒ регистрироваться и авторизоваться в системе,
‒ создавать и просматривать проекты,
‒ подавать отклики на проекты,
‒ общаться через встроенную систему сообщений,
‒ управлять профилями и портфолио,
‒ оставлять отзывы и рейтинги.

Пользователями этого веб-приложения будут являться заказчики проектов, фрилансеры, компании, ищущие удаленных сотрудников, а также администраторы системы для модерации контента и управления платформой.

Область применения веб-приложения CollabHub включает:

‒ Поиск исполнителей для различных типов проектов: веб-разработка, дизайн, копирайтинг, маркетинг и др.
‒ Создание проектов с детальным описанием требований и сроков выполнения.
‒ Управление процессом отбора исполнителей через систему откликов.
‒ Организация коммуникации между заказчиками и исполнителями.
‒ Оценка качества выполненной работы через систему отзывов и рейтингов.

Веб-приложение CollabHub является универсальной платформой для фриланс-рынка, которая обеспечивает эффективное взаимодействие между всеми участниками процесса.

1.2 Постановка задачи

Разрабатываемое веб-приложение должно предоставлять функционал для поиска и взаимодействия между заказчиками и исполнителями проектов. Также в приложении нужно предусмотреть возможность создания проектов, подачи откликов, общения между участниками и оценки качества выполненной работы.

Исходя из вышеизложенного, приложение должно выполнять следующие задачи:

‒ иметь интуитивно понятный веб-интерфейс с адаптивным дизайном,
‒ предоставлять систему регистрации и авторизации пользователей с ролями (заказчик/фрилансер/администратор),
‒ обеспечивать создание, редактирование, просмотр и удаление проектов,
‒ предоставлять возможность подачи откликов на проекты и управления заявками,
‒ включать систему сообщений для общения между пользователями,
‒ предоставлять функционал оценки и отзывов за выполненные работы,
‒ обеспечивать управление профилями и портфолио пользователей,
‒ включать систему комментариев к проектам,
‒ предоставлять административные функции для модерации контента и управления системой.

Веб-приложение должно состоять из набора страниц и компонентов. На главной странице необходимо разместить каталог проектов с возможностью поиска и фильтрации, а также навигационное меню для доступа к различным разделам:
‒ просмотр и создание проектов,
‒ управление откликами,
‒ система сообщений,
‒ управление профилем.

При выборе проекта пользователь должен иметь возможность просмотреть детальную информацию и подать отклик (для фрилансеров) или управлять откликами (для заказчиков).

1.3 Анализ предметной области

В рамках анализа предметной области была проведена детальная работа по изучению специфики фриланс-рынка и существующих платформ для поиска исполнителей и заказчиков проектов. Данный анализ позволил выявить тенденции развития рынка фриланс-услуг и определить конкурентные преимущества разрабатываемого решения.

Фриланс-рынок представляет собой быстрорастущую индустрию, где все больше профессионалов выбирают удаленную работу и проектный подход к занятости. По статистическим данным, количество фрилансеров в мире продолжает расти, что создает потребность в специализированных платформах, способных эффективно соединять заказчиков и исполнителей проектов.

Существующие решения и их недостатки

В ходе исследования были проанализированы три крупнейшие платформы для фриланса. Upwork – крупнейшая международная платформа, которая привлекает пользователей большим количеством зарегистрированных фрилансеров (более 12 миллионов) и надежной системой платежей. Однако платформа взимает высокую комиссию (20% с первых $500), имеет сложный процесс регистрации и перегруженный интерфейс. Freelancer.com позиционирует себя как глобальная фриланс-платформа с поддержкой многоязычного интерфейса и системы конкурсов. Тем не менее, интерфейс платформы перегружен различными функциями, что затрудняет навигацию, а также отмечаются высокие комиссии. На российском рынке широко известна платформа FL.ru, которая адаптирована под специфику отечественного фриланс-рынка и поддерживает российские платежные системы. Однако интерфейс платформы устарел и не соответствует современным стандартам, к тому же пользователи отмечают недостаточную защиту прав и проблемы при разрешении споров между заказчиками и исполнителями.

На основе проведенного анализа были определены ключевые требования к эффективной фриланс-платформе: простота использования с интуитивным интерфейсом без избыточной функциональности, прозрачность условий работы и честная система комиссий, безопасность данных пользователей и защита финансовых операций, возможность построения долгосрочных рабочих отношений через систему сообщений и отзывов, мобильность и доступность с любых устройств. На основе этого анализа была сформулирована концепция платформы CollabHub, направленная на устранение выявленных недостатков существующих решений. Разрабатываемое веб-приложение будет сочетать современный адаптивный интерфейс, прозрачную систему работы, надежную защиту данных и все необходимые инструменты для эффективного взаимодействия между заказчиками и исполнителями.

1.4 Обоснование выбора программного обеспечения

Правильный выбор технологий и инструментов разработки является критически важным этапом в создании веб-приложения, так как от этого напрямую зависит скорость разработки, производительность приложения и удобство сопровождения кода в будущем. В процессе проектирования платформы CollabHub был проведен тщательный анализ различных технологий и инструментов, доступных на рынке.

Для проектирования диаграмм и архитектурных схем был использован интернет-сервис draw.io, который предоставляет широкий набор инструментов для создания различных типов диаграмм. Сервис позволяет работать как онлайн, так и офлайн через десктопное приложение. Одно из ключевых преимуществ draw.io – возможность сохранения диаграмм в облачном хранилище, что обеспечивает их доступность с любого устройства и из любой точки мира. Кроме того, сервис располагает большим количеством готовых шаблонов для проектирования различных типов диаграмм: DFD, UML, ER-диаграммы и другие. Возможность экспорта в различные форматы (PNG, PDF, SVG) позволяет легко интегрировать диаграммы в документацию и презентации.

В качестве языка программирования выбран Python 3.8+ в сочетании с современным фреймворком FastAPI. Python был выбран по нескольким причинам: во-первых, это один из самых популярных и быстроразвивающихся языков программирования, что обеспечивает широкую базу разработчиков и большое количество ресурсов для обучения. Во-вторых, Python отличается читаемостью синтаксиса, что значительно ускоряет процесс разработки и облегчает поддержку кода. В-третьих, язык имеет огромную экосистему библиотек, которые позволяют решать практически любые задачи, возникающие при разработке.

Особое внимание уделено выбору веб-фреймворка FastAPI, который представляет собой современный высокопроизводительный фреймворк для создания API. Ключевое преимущество FastAPI заключается в асинхронной обработке запросов, что позволяет обрабатывать множество одновременных подключений без блокировки основного потока выполнения. Это особенно важно для веб-приложений, где необходимо обеспечить быструю реакцию на действия пользователей.

FastAPI автоматически генерирует интерактивную документацию API (Swagger UI и ReDoc), что значительно упрощает процесс разработки и тестирования. Другое важное преимущество – встроенная валидация данных через библиотеку Pydantic, которая позволяет автоматически проверять корректность входных данных и возвращать понятные сообщения об ошибках. Поддержка современных стандартов веб-API (OpenAPI 3.0, JSON Schema) обеспечивает совместимость с различными клиентами и возможность автоматической генерации клиентских библиотек.

Для фронтенда используется классическая тройка HTML5, CSS3 и JavaScript, что обеспечивает широкую совместимость с различными браузерами и устройствами. Особое внимание уделено выбору CSS-фреймворка Tailwind CSS, который использует утилитарный подход к стилизации интерфейсов. Вместо написания большого количества кастомных CSS классов, Tailwind предоставляет готовые утилитарные классы, которые можно комбинировать для создания практически любого дизайна.

Tailwind CSS позволяет быстро разрабатывать UI компоненты без необходимости писать большое количество CSS кода. Благодаря префиксам (responsive variants) легко создаются адаптивные интерфейсы для различных размеров экранов – достаточно добавить префикс типа `md:`, `lg:`, `xl:` к классу для применения стиля на определенном брейкпоинте. Консистентный дизайн достигается через использование предопределенной палитры цветов и типовографики, что обеспечивает единообразие визуального стиля по всему приложению.

Для работы с базой данных выбран SQLite – встраиваемая реляционная база данных, которая обладает рядом преимуществ для проектов среднего масштаба. SQLite не требует отдельного сервера базы данных, что значительно упрощает развертывание и снижает затраты на инфраструктуру. База данных хранится в одном файле, что упрощает резервное копирование и миграцию данных.

Несмотря на свою легкость, SQLite поддерживает все основные возможности реляционных баз данных, включая ACID транзакции для обеспечения целостности данных, индексы для повышения производительности запросов, внешние ключи для поддержания ссылочной целостности и триггеры для автоматизации определенных действий.

Для разработки приложения используется интегрированная среда разработки Visual Studio Code, которая зарекомендовала себя как одна из лучших IDE для работы с Python и веб-разработки в целом. VS Code поддерживает большое количество языков программирования через расширения, что делает её универсальным инструментом для разработки. Встроенная поддержка Git позволяет удобно управлять версиями кода и отслеживать изменения. Богатая экосистема расширений включает linters для проверки качества кода, автоформатеры, отладчики и множество других полезных инструментов. Встроенный терминал позволяет выполнять команды без переключения между приложениями, а интегрированный отладчик значительно упрощает процесс поиска и исправления ошибок.

Минимальные системные требования для работоспособности веб-приложения CollabHub были определены на основе анализа потребностей типичного пользователя. Приложение должно работать на наиболее распространенных операционных системах: Windows 10, различные дистрибутивы Linux и macOS. Необходима версия Python 3.8 или выше, которая включает все необходимые возможности для современной разработки. Для обеспечения приемлемой производительности рекомендуется процессор с тактовой частотой 2.0 ГГц и выше, а также оперативная память объемом не менее 4 ГБ. Минимальный объем свободного места на жестком диске составляет 1 ГБ, что необходимо для установки Python, библиотек и самой базы данных. Для доступа к веб-приложению необходим современный веб-браузер с поддержкой HTML5 и JavaScript, такие как Chrome, Firefox, Safari или Edge.

2 ПРОЕКТИРОВАНИЕ АРХИТЕКТУРЫ ВЕБ-ПРИЛОЖЕНИЯ

2.1 Проектирование причинно-следственной диаграммы

Причинно-следственная диаграмма является важным инструментом системного анализа, позволяющим выявить наиболее существенные причины, влияющие на конечный результат функционирования системы. Этот инструмент помогает структурировать знания о системе и понять взаимосвязи между различными компонентами. На рисунке 1 изображена причинно-следственная диаграмма веб-приложения CollabHub.

Веб-приложение CollabHub работает с двумя основными типами данных: пользовательскими и системными. Пользовательские данные включают профили пользователей, проекты, отклики и заявки, сообщения между пользователями, а также отзывы и рейтинги. Системные данные включают учетные записи с аутентификацией, статистику использования платформы, логи системы и конфигурационные настройки.

Причинно-следственные связи в системе определяются потребностями пользователей: необходимость в выполнении проекта приводит к регистрации заказчиков и созданию проектов, поиск работы – к регистрации фрилансеров и созданию профилей, заинтересованность в проекте – к подаче откликов, необходимость общения – к использованию системы сообщений, а завершение проекта – к оставлению отзывов. Со стороны системы регистрация пользователей создает учетные записи с ролями, создание проектов формирует базу данных проектов, подача откликов создает базу откликов и заявок, взаимодействие между пользователями генерирует сообщения и историю переписки, оценка работы обновляет рейтинги и статистику.

Пользователи (заказчики, фрилансеры или администраторы) взаимодействуют с веб-приложением через браузер. Заказчики создают проекты, просматривают отклики, выбирают исполнителей и общаются с фрилансерами. Фрилансеры просматривают доступные проекты, подают отклики, общаются с заказчиками и выполняют работу. Администраторы модерируют контент, управляют проектами и комментариями, просматривают статистику системы. Система CollabHub обрабатывает все пользовательские запросы, обеспечивая безопасность данных и целостность информации.

2.2 Проектирование DFD-диаграмм первого и второго уровня

Для полного описания движения данных внутри приложения спроектированы DFD диаграммы первого и второго уровня.

DFD-диаграмма (диаграмма потока данных) – методология графического структурного анализа, описывающая внешние по отношению к системе источники и адресаты данных, логические функции, потоки данных и хранилища данных. Цель DFD представления – продемонстрировать, как каждый процесс преобразует свои входные данные в выходные, а также выявить отношения между этими процессами.

На рисунке 2 изображена DFD-диаграмма первого уровня веб-приложения CollabHub.

Пользователь взаимодействует с веб-интерфейсом, который обрабатывает запросы и взаимодействует с базой данных для получения и сохранения информации.

На рисунке 3 изображена DFD-диаграмма второго уровня веб-приложения CollabHub.

На данной диаграмме показано, что пользователь взаимодействует с веб-приложением через браузер, обращаясь к различным страницам и функциям приложения. Система обрабатывает запросы, взаимодействует с базой данных и файловой системой для получения и сохранения данных.

Основные процессы на втором уровне:

1. Аутентификация и авторизация
2. Управление проектами (создание, редактирование, просмотр, удаление)
3. Система откликов (подача, управление заявками)
4. Система сообщений (чат между пользователями)
5. Управление профилями (редактирование профиля, портфолио)
6. Система рейтингов и отзывов
7. Административные функции (модерация контента)

2.3 Проектирование UML-диаграмм стереотипов

UML (Unified Modeling Language) – язык графического описания для объектного моделирования в области разработки программного обеспечения. Используя UML, разработчики могут создавать диаграммы классов, диаграммы вариантов использования, диаграммы последовательностей и другие виды диаграмм.

UML-диаграммы стереотипов используются для создания новых элементов моделирования, получаемых из существующих, но имеющих определенные свойства, которые подходят для конкретной проблемы предметной области.

На рисунке 4 представлена UML-диаграмма стереотипов веб-приложения CollabHub.

На данной диаграмме показано, что пользователь может взаимодействовать со следующими основными компонентами системы:

‒ модуль управления проектами,
‒ модуль системы откликов,
‒ модуль системы сообщений,
‒ модуль управления профилями,
‒ модуль системы рейтингов и отзывов,
‒ модуль административных функций.

Каждый модуль имеет свои специфические функции и взаимодействует с другими компонентами системы для обеспечения полного функционала платформы.

2.4 Проектирование прототипа пользовательского интерфейса

Прототип – модель, прообраз конечного продукта. Для описания прототипа веб-приложения CollabHub выбрана интерактивная модель. Интерактивный прототип представляет собой схематичное изображение пользовательского интерфейса с возможностью взаимодействия.

На рисунке 5 представлен прототип главной страницы веб-приложения CollabHub.

Проектирование пользовательского интерфейса включает разработку следующих ключевых страниц:

‒ Главная страница с каталогом проектов и фильтрами
‒ Страница регистрации и авторизации
‒ Страница создания проекта
‒ Страница детального просмотра проекта
‒ Страница управления откликами
‒ Страница системы сообщений
‒ Страница профиля пользователя
‒ Страница администрирования (для администраторов)

Дизайн интерфейса основан на принципах Material Design и адаптивного дизайна, обеспечивая удобство использования на различных устройствах.

3 ПРОЕКТИРОВАНИЕ БАЗЫ ДАННЫХ ДЛЯ ВЕБ-ПРИЛОЖЕНИЯ

3.1 Анализ требований к базе данных

Проектирование базы данных является одним из ключевых этапов разработки веб-приложения CollabHub. Правильно спроектированная база данных обеспечивает эффективное хранение данных, быстрый доступ к информации и целостность всех данных в системе. В процессе анализа требований к базе данных была проведена работа по определению всех необходимых сущностей, их атрибутов и связей между ними.

Первым шагом в проектировании базы данных является идентификация всех основных сущностей, с которыми система будет работать. Сущность представляет собой объект реального мира, информацию о котором необходимо хранить в базе данных. Для веб-приложения CollabHub были определены следующие основные сущности:

Центральной сущностью системы являются Пользователи (Users), которые могут выступать в роли заказчиков проектов, фрилансеров, выполняющих работу, или администраторов, управляющих системой. Каждый пользователь имеет уникальный идентификатор, электронную почту для авторизации, зашифрованный пароль, имя и роль в системе. Для фрилансеров дополнительно хранятся информация о навыках, рейтинге, количестве завершенных проектов и ссылки на портфолио.

Проекты (Jobs) представляют собой задания, созданные заказчиками для выполнения фрилансерами. Каждый проект содержит название, детальное описание требований, срок выполнения, приоритет и текущий статус. Для идентификации создателя проекта используется связь с таблицей пользователей через email адрес заказчика.

Отклики (Applications) связывают фрилансеров с проектами. Когда фрилансер заинтересован в конкретном проекте, он подает отклик, который имеет статус: ожидает рассмотрения, принят или отклонен. Система отслеживает историю откликов, что позволяет заказчику выбрать наиболее подходящего исполнителя, а фрилансеру видеть статус своих заявок.

Сообщения (Messages) обеспечивают возможность общения между пользователями как по конкретному проекту, так и в общем чате. Каждое сообщение содержит информацию об отправителе и получателе, текст сообщения, время отправки и флаг прочитанности, что позволяет реализовать систему уведомлений о непрочитанных сообщениях.

Отзывы (Reviews) позволяют заказчикам оценивать качество выполненной фрилансером работы. Отзыв включает числовой рейтинг (от 1 до 5), текстовый комментарий и автоматически обновляет статистику фрилансера в его профиле.

Комментарии (ProjectComments) дают возможность участникам проекта оставлять комментарии к проектам, что может быть полезно для уточнения деталей или обсуждения особенностей выполнения работы.

Требования к базе данных были сформулированы на основе анализа функциональных требований к системе и лучших практик проектирования реляционных баз данных. Важнейшим требованием является нормализация данных для исключения дублирования информации. Нормализация позволяет минимизировать избыточность данных, что не только экономит место, но и упрощает поддержку данных в согласованном состоянии. При изменении информации о пользователе не возникает необходимости обновлять её в множестве мест.

Обеспечение целостности данных через внешние ключи гарантирует, что в системе не могут существовать "осиротевшие" записи. Например, проект не может ссылаться на несуществующего пользователя, отклик не может быть привязан к удаленному проекту. Это предотвращает появление некорректных данных в системе.

Индексирование для повышения производительности запросов является критически важным требованием. Индексы создаются на часто используемых в запросах полях, таких как email пользователя, ID проекта, статус отклика. Это позволяет значительно ускорить поиск и выборку данных, что особенно важно для таких операций, как поиск проектов, получение списка сообщений или фильтрация откликов.

Безопасное хранение паролей через хеширование – это обязательное требование безопасности. Пароли пользователей никогда не хранятся в открытом виде. Вместо этого они проходят через одностороннюю криптографическую функцию (хэш), которая превращает пароль в строку фиксированной длины. При авторизации введенный пароль также хэшируется и сравнивается с хранящимся в базе хэшем. Даже при компрометации базы данных злоумышленник не сможет восстановить исходные пароли.

Поддержка транзакций для обеспечения согласованности данных позволяет группировать несколько операций в одну атомарную единицу работы. Либо все операции транзакции выполняются успешно, либо ни одна из них не выполняется. Это критически важно, например, при создании отклика и одновременном обновлении счетчика откликов, или при удалении проекта и всех связанных с ним откликов и комментариев.

3.2 Проектирование структуры базы данных

Проектирование структуры базы данных является ключевым этапом в разработке любого веб-приложения. Правильно спроектированная схема базы данных обеспечивает эффективное хранение и быстрое извлечение данных, а также гарантирует целостность информации. Для веб-приложения CollabHub была спроектирована реляционная база данных SQLite, которая включает шесть основных таблиц.

Схема базы данных спроектирована с учетом принципов нормализации, что исключает дублирование информации и минимизирует избыточность данных. Каждая таблица отвечает за хранение информации об одной сущности системы, а связи между таблицами реализованы через внешние ключи, что обеспечивает ссылочную целостность данных.

Рассмотрим структуру каждой таблицы более подробно.

Структура таблицы Users:
- id (INTEGER, PRIMARY KEY)
- email (TEXT, UNIQUE, NOT NULL)
- password (TEXT, NOT NULL)
- role (TEXT, CHECK: 'client', 'freelancer', 'admin')
- name (TEXT)
- avatar (TEXT)
- about_me (TEXT)
- activity (TEXT)
- skills (TEXT)
- rating (REAL, DEFAULT 0.0)
- completed_projects (INTEGER, DEFAULT 0)
- phone (TEXT)
- telegram (TEXT)
- portfolio_files (TEXT)
- portfolio_links (TEXT)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)

Структура таблицы Jobs:
- id (INTEGER, PRIMARY KEY)
- title (TEXT, NOT NULL)
- description (TEXT, NOT NULL)
- deadline (TEXT, NOT NULL)
- status (TEXT, NOT NULL)
- creator_email (TEXT, NOT NULL)
- priority (TEXT, DEFAULT 'medium')
- files (TEXT)

Структура таблицы Applications:
- id (INTEGER, PRIMARY KEY)
- job_id (INTEGER, NOT NULL, FOREIGN KEY)
- freelancer_email (TEXT, NOT NULL, FOREIGN KEY)
- status (TEXT, DEFAULT 'pending')

Структура таблицы Messages:
- id (INTEGER, PRIMARY KEY)
- sender_email (TEXT, NOT NULL, FOREIGN KEY)
- receiver_email (TEXT, NOT NULL, FOREIGN KEY)
- job_id (INTEGER, FOREIGN KEY)
- message (TEXT, NOT NULL)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)
- is_read (BOOLEAN, DEFAULT FALSE)

Структура таблицы Reviews:
- id (INTEGER, PRIMARY KEY)
- job_id (INTEGER, NOT NULL, FOREIGN KEY)
- freelancer_email (TEXT, NOT NULL, FOREIGN KEY)
- client_email (TEXT, NOT NULL, FOREIGN KEY)
- rating (INTEGER, CHECK 1-5)
- comment (TEXT)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)

Структура таблицы ProjectComments:
- id (INTEGER, PRIMARY KEY)
- job_id (INTEGER, NOT NULL, FOREIGN KEY)
- user_email (TEXT, NOT NULL, FOREIGN KEY)
- comment (TEXT, NOT NULL)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)

3.3 Выбор технологии для работы с базой данных

Выбор технологии для работы с базой данных является одним из критически важных решений при разработке веб-приложения, так как от этого зависит производительность системы, удобство развертывания и дальнейшая масштабируемость проекта.

Для работы с базой данных выбран SQLite в сочетании с встроенной в Python библиотекой sqlite3. SQLite представляет собой встраиваемую реляционную базу данных, которая хранит всю базу данных в одном файле на диске. Это позволяет не требовать отдельного сервера базы данных, что значительно упрощает развертывание приложения и снижает затраты на инфраструктуру. Приложение может работать на любом сервере без необходимости настройки дополнительных компонентов.

Одно из ключевых преимуществ SQLite – его легковесность. Библиотека SQLite очень компактна (менее 1 МБ) и может быть легко встроена в приложение. Это делает её идеальной для небольших и средних проектов, где не требуется распределенная архитектура с множеством серверов. Несмотря на свою легкость, SQLite предоставляет полную поддержку SQL стандарта, включая сложные запросы с JOIN, подзапросами, триггерами и хранимыми процедурами.

Важным преимуществом SQLite является поддержка ACID транзакций, что обеспечивает целостность данных. ACID (Atomicity, Consistency, Isolation, Durability) гарантирует, что все транзакции выполняются атомарно (либо все операции успешны, либо все откатываются), данные остаются консистентными, операции изолированы друг от друга, а изменения сохраняются на диске. Это критически важно для финансовых операций и критически важных данных.

SQLite идеально подходит для веб-приложений среднего масштаба с количеством пользователей до нескольких тысяч и базой данных размером до нескольких гигабайт. Для приложения CollabHub это оптимальный выбор, так как платформа изначально ориентирована на локальный рынок и не требует обработки миллионов запросов в секунду.

Для работы с базой данных в приложении будет создан отдельный модуль с набором функций. Функция get_connection() будет обеспечивать получение соединения с базой данных, инициализируя его при необходимости. Функция init_db() будет отвечать за создание всех необходимых таблиц при первом запуске приложения. Для каждой сущности системы будут созданы функции CRUD (Create, Read, Update, Delete) операций, которые инкапсулируют всю логику работы с данными.

Например, для работы с пользователями будут созданы функции get_user_by_email(), create_user(), update_user_profile(), а также специальные функции для работы с аутентификацией и авторизацией. Для работы с проектами будут функции create_job(), get_jobs(), update_job(), delete_job() и другие. Аналогично для откликов, сообщений, отзывов и комментариев будут созданы соответствующие функции, которые обрабатывают все необходимые операции с данными.

Все функции работы с базой данных будут изолированы в отдельном модуле models.py, что обеспечивает чистоту архитектуры приложения и соблюдение принципа разделения ответственности. Это позволяет легко тестировать функции работы с базой данных независимо от остальных компонентов системы и упрощает сопровождение кода в будущем.

Такой подход к работе с базой данных обеспечивает гибкость системы: при необходимости можно легко заменить SQLite на другую СУБД (например, PostgreSQL или MySQL), изменив только модуль models.py без затрагивания остальной части приложения.

4 ТЕХНИЧЕСКОЕ ОБЕСПЕЧЕНИЕ РЕАЛИЗАЦИИ ПРОЕКТА

4.1 Выбор технологий разработки

Для реализации веб-приложения CollabHub выбран следующий технологический стек:

Backend:
‒ Python 3.8+ – язык программирования
‒ FastAPI – веб-фреймворк для создания API
‒ SQLite – база данных
‒ Jinja2 – шаблонизатор для генерации HTML
‒ Pydantic – валидация данных
‒ Uvicorn – ASGI сервер

Frontend:
‒ HTML5 – структура страниц
‒ CSS3 с Tailwind CSS – стилизация
‒ JavaScript (Vanilla) – интерактивность
‒ Fetch API – асинхронные запросы к серверу

Инструменты разработки:
‒ Visual Studio Code – IDE
‒ Git – система контроля версий
‒ Docker – контейнеризация 

Обоснование выбора технологий:

Выбор технологий для веб-приложения CollabHub основан на тщательном анализе требований к проекту и современных тенденций веб-разработки. Python с фреймворком FastAPI был выбран для backend разработки по нескольким причинам. Во-первых, Python является одним из самых популярных языков программирования с огромной экосистемой библиотек, что обеспечивает быструю разработку и богатые возможности для реализации функционала. Во-вторых, FastAPI обеспечивает высокую производительность благодаря встроенной поддержке асинхронного программирования, что позволяет обрабатывать множество одновременных запросов. В-третьих, фреймворк автоматически генерирует интерактивную документацию API, что значительно упрощает процесс разработки и тестирования.

SQLite был выбран для базы данных, так как она идеально подходит для проекта среднего масштаба без необходимости настройки отдельного сервера базы данных. Это значительно упрощает развертывание приложения и снижает затраты на инфраструктуру. SQLite хранит всю базу данных в одном файле, что упрощает резервное копирование и миграцию. Несмотря на свою легкость, SQLite поддерживает все необходимые возможности реляционных баз данных, включая ACID транзакции и полную поддержку SQL стандарта.

Tailwind CSS позволяет быстро создавать адаптивный UI без написания большого объема CSS кода. Утилитарный подход Tailwind означает, что вместо создания множества уникальных CSS классов, разработчик использует готовые утилитарные классы, которые можно комбинировать для создания практически любого дизайна. Это значительно ускоряет процесс разработки интерфейса, а благодаря префиксам (sm:, md:, lg:) легко создаются адаптивные интерфейсы для различных размеров экранов. Tailwind также обеспечивает консистентный дизайн через предопределенную палитру цветов и типовографику.

Выбранный технологический стек обеспечивает оптимальное соотношение между производительностью, скоростью разработки и простотой сопровождения. Все технологии хорошо интегрируются друг с другом и поддерживают современные стандарты веб-разработки.

4.2 Архитектурные решения

Архитектура веб-приложения CollabHub спроектирована с учетом принципов современной веб-разработки и лучших практик создания программного обеспечения. Архитектурные решения были приняты на основе анализа требований к системе и опыта разработки аналогичных приложений.

Одним из ключевых принципов архитектуры является модульность. Код разделен на логические модули, каждый из которых отвечает за конкретную функциональность системы. Модуль аутентификации обрабатывает регистрацию и авторизацию пользователей. Модуль проектов управляет созданием, редактированием и удалением проектов. Модуль откликов обеспечивает обработку заявок фрилансеров на проекты. Модуль сообщений реализует систему коммуникации между пользователями. Такое разделение обеспечивает чистоту кода и упрощает его сопровождение.

Принцип миниатюрности означает стремление к минимальной сложности при максимальном функционале. В систему включен только необходимый функционал без избыточной сложности. Это обеспечивает простоту понимания кода, быстроту разработки и снижает вероятность появления ошибок. Каждый компонент системы имеет четко определенную ответственность и не дублирует функциональность других компонентов.

Безопасность является одним из приоритетов архитектуры. Пароли пользователей хранятся в зашифрованном виде с использованием алгоритма хеширования, что обеспечивает невозможность восстановления исходных паролей даже при компрометации базы данных. Для авторизации используются JWT токены, которые обеспечивают безопасную передачу информации о пользователе между клиентом и сервером. Защита от SQL-инъекций реализуется через использование параметризованных запросов вместо конкатенации строк в SQL запросах.

Производительность достигается за счет нескольких архитектурных решений. Индексы в базе данных создаются на часто используемых полях, что значительно ускоряет поиск и выборку данных. Асинхронная обработка запросов в FastAPI позволяет обрабатывать множество одновременных подключений без блокировки основного потока. Использование соединений с базой данных через пулы соединений минимизирует накладные расходы на открытие и закрытие соединений.

Масштабируемость обеспечивается через использование модульной архитектуры, где новые функции могут быть добавлены как отдельные модули без изменения существующего кода. Использование стандартных паттернов проектирования упрощает расширение функционала. Архитектура позволяет при необходимости мигрировать на более мощные технологии (например, заменить SQLite на PostgreSQL) без существенной переделки всей системы.

Структура проекта:

```
app/
├── main.py              # Главный файл приложения
├── database.py          # Работа с базой данных
├── models.py            # Модели и функции для работы с данными
├── utils.py             # Вспомогательные функции
├── constants.py         # Константы
├── templates/           # HTML шаблоны
├── static/
│   ├── css/            # Стили
│   ├── js/             # JavaScript
│   └── icons/          # Иконки
└── uploads/            # Загруженные файлы
```

4.3 Планирование этапов реализации

Реализация проекта планируется в следующие этапы:

Этап 1: Подготовка (2 дня)
‒ Настройка окружения разработки
‒ Инициализация проекта
‒ Создание базовой структуры

Этап 2: База данных (3 дня)
‒ Проектирование и создание таблиц
‒ Реализация функций для работы с БД
‒ Создание тестовых данных

Этап 3: Backend разработка (10 дней)
‒ Реализация аутентификации и авторизации
‒ Разработка API для проектов
‒ Разработка API для откликов, сообщений, отзывов
‒ Реализация административных функций

Этап 4: Frontend разработка (8 дней)
‒ Создание HTML шаблонов
‒ Разработка CSS стилей
‒ Реализация JavaScript функционала
‒ Создание адаптивного дизайна

Этап 5: Интеграция и тестирование (3 дня)
‒ Интеграция всех компонентов
‒ Функциональное тестирование
‒ Исправление обнаруженных ошибок

Этап 6: Развертывание (2 дня)
‒ Настройка продакшн окружения
‒ Деплой на хостинг
‒ Финальное тестирование

ЗАКЛЮЧЕНИЕ

В ходе прохождения производственной практики была проведена комплексная аналитическая работа по проектированию веб-приложения CollabHub для поиска исполнителей и заказчиков проектов. Работа охватила все ключевые аспекты проектирования информационной системы: от анализа предметной области до разработки детального технического проекта.

Значительная часть практики была посвящена глубокому анализу предметной области. В процессе изучения фриланс-рынка и существующих платформ удалось выявить ключевые недостатки современных решений, такие как высокая комиссия, сложность интерфейсов и недостаточная защита пользователей. Анализ показал, что существует реальная потребность в альтернативной платформе, которая сочетает простоту использования, прозрачность условий работы и надежную систему безопасности.

На основе проведенного анализа были четко определены все функциональные и нефункциональные требования к будущей системе. Функциональные требования описывают конкретные возможности, которые должна предоставлять платформа: регистрация и авторизация, система управления проектами (создание, редактирование, просмотр, удаление), система откликов, коммуникация между пользователями, система рейтингов и административные функции для модерации контента. Нефункциональные требования касаются качества системы: производительность, безопасность, масштабируемость и удобство использования.

Важной частью работы стало обоснование выбора технологий разработки. После тщательного анализа различных технологических решений была выбрана комбинация Python + FastAPI для backend разработки, которая обеспечивает высокую производительность благодаря асинхронной обработке запросов и современные инструменты разработки через автоматическую генерацию документации и встроенную валидацию данных. Для фронтенда выбран Tailwind CSS, который позволяет быстро создавать современные адаптивные интерфейсы, а для базы данных – SQLite, идеально подходящий для проектов среднего масштаба.

Спроектирована архитектура системы с четким разделением на модули: модуль аутентификации, модуль управления проектами (создание, редактирование, просмотр, удаление), системы откликов, сообщений, управления профилями, рейтингов и административных функций для модерации контента. Каждый модуль имеет свою ответственность и взаимодействует с другими компонентами системы через четко определенные интерфейсы.

Особое внимание было уделено проектированию базы данных. Были определены все основные сущности системы, их атрибуты и связи между ними. База данных спроектирована с соблюдением принципов нормализации, что исключает дублирование информации и обеспечивает целостность данных. Для повышения производительности были предусмотрены индексы на ключевых полях, а для обеспечения безопасности – хеширование паролей пользователей.

Разработаны диаграммы процессов, данных и взаимодействия компонентов, которые наглядно демонстрируют логику работы системы и потоки данных между различными компонентами. Причинно-следственные диаграммы позволили выявить основные причины, влияющие на функционирование системы, а DFD-диаграммы – описать движение данных на различных уровнях детализации.

Спроектирован пользовательский интерфейс с определением структуры всех ключевых страниц: главной страницы с каталогом проектов, страниц регистрации и авторизации, создания и просмотра проектов, управления откликами, системы сообщений, профилей пользователей и административной панели. Дизайн интерфейса основан на принципах адаптивности и доступности, обеспечивая удобство использования на различных устройствах.

Составлен детальный план этапов реализации проекта с разбивкой по времени и конкретным задачам. План охватывает все этапы от подготовки окружения до финального развертывания и включает разумные сроки для каждого этапа.

В результате всей проделанной работы был создан полный технический проект веб-приложения CollabHub с подробным описанием всех компонентов, архитектурных решений и технологических подходов к реализации. Проект готов к использованию в качестве основы для разработки функциональной платформы для фриланс-рынка.

Прохождение производственной практики позволило значительно расширить знания и навыки в области проектирования информационных систем. Была изучена методология проектирования веб-приложений, освоены инструменты создания диаграмм и схем, углублены знания в области выбора технологий разработки. Полученный опыт в области проектирования веб-приложений и выбора технологических решений будет ценен для дальнейшей профессиональной деятельности в сфере информационных систем и программирования.

Данный опыт важен не только для написания дипломной работы, но и для будущей карьеры разработчика, так как он охватывает все ключевые этапы создания веб-приложения от идеи до готового технического проекта, что является основой для успешной реализации любого программного продукта.

(Дата: 15.11.2025)
(Подпись: _________)

СПИСК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ

1. Климов А. А. Веб-разработка на Python и FastAPI: практический курс / А. А. Климов. – Москва : ДМК Пресс, 2023
2. Элмасри Р., Наватх Ш. Базы данных. Основы проектирования, реализации и сопровождения / Р. Элмасри, Ш. Наватх. – Санкт-Петербург : Питер, 2022
3. Хиллард Д. FastAPI: современный Python для веб-разработки / Д. Хиллард. – Москва : О'Рейли, 2024
4. Глушаков Е. П. Архитектура клиент-серверных приложений на Python / Е. П. Глушаков. – Москва : Наука и Техника, 2023
5. Python Software Foundation. Python 3.11 Documentation [Электронный ресурс]. – Режим доступа: https://docs.python.org/3.11/ (дата обращения: 25.10.2025)
6. FastAPI Framework. FastAPI Documentation [Электронный ресурс]. – Режим доступа: https://fastapi.tiangolo.com/ (дата обращения: 25.10.2025)

ПРИЛОЖЕНИЕ

Приложение содержит дополнительные материалы по проектированию веб-приложения CollabHub: диаграммы процессов, схемы базы данных, макеты пользовательского интерфейса.

