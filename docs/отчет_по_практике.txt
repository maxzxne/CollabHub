Профессиональное образовательное учреждение частное
«Колледж менеджмента»


Отчет по производственной практике
ПП. 02 Осуществление интеграции программных модулей

по ПМ.02 Осуществление интеграции программных модулей


Специальность 09.02.07 «Информационные системы и программирование»

Сроки прохождения практики:
с «25» октября 2025 г. по «15» ноября 2025 г.

Место практики: ПОУЧ «Колледж менеджмента»


Выполнил:	студент 4 курса, 
группы 22/ИСиП/О-З
Коваленко М. В.
_________________
(подпись)


Проверил:	преподаватель
Быков Михаил 
Николаевич
_________________
(оценка)
_________________
(подпись, дата)





Архангельск 2025

СОДЕРЖАНИЕ

Перечень сокращений и обозначений	3
Введение	4
1 Анализ и разработка требований к веб-приложению CollabHub	6
1.1 Назначение и область применения	6
1.2 Постановка задачи	6
1.3 Анализ предметной области	8
1.4 Обоснование выбора программного обеспечения	10
2 Проектирование архитектуры веб-приложения	13
2.1 Проектирование причинно-следственной диаграммы	13
2.2 Проектирование DFD-диаграмм первого и второго уровня	14
2.3 Проектирование UML-диаграмм стереотипов	16
2.4 Проектирование прототипа пользовательского интерфейса	18
3 Проектирование базы данных для веб-приложения	21
3.1 Анализ требований к базе данных	21
3.2 Проектирование структуры базы данных	23
3.3 Выбор технологии для работы с базой данных	26
4 Техническое обеспечение реализации проекта	29
4.1 Выбор технологий разработки	29
4.2 Архитектурные решения	32
4.3 Планирование этапов реализации	34
Заключение	38
Список использованных источников	40
Приложение	41

ПЕРЕЧЕНЬ СОКРАЩЕНИЙ И ОБОЗНАЧЕНИЙ

БД – база данных
СУБД – система управления базой данных
API (Application Programming Interface) — программный интерфейс приложения
REST (Representational State Transfer) – архитектурный стиль взаимодействия компонентов распределённого приложения
GUI (Graphic User Interface) – графический пользовательский интерфейс
JWT (JSON Web Token) – стандарт для создания токенов доступа
SQLite – встраиваемая реляционная база данных
FastAPI – современный веб-фреймворк для создания API
HTML – язык гипертекстовой разметки
CSS – каскадные таблицы стилей
JS – JavaScript, язык программирования
Tailwind CSS – фреймворк для CSS

ВВЕДЕНИЕ

В современном мире фриланс-индустрия активно развивается, и большое количество людей выбирают удаленную работу и фриланс как основной вид занятости. По данным исследований, количество фрилансеров в мире превышает 1.5 миллиарда человек, а объем рынка фриланс-услуг составляет более 1 триллиона долларов. Веб-приложения для поиска исполнителей и заказчиков проектов становятся неотъемлемой частью современной экономики, обеспечивая гибкость трудовых отношений и возможности для удаленной работы.

Актуальность разработки веб-приложения CollabHub обусловлена следующими факторами:

• Рост популярности фриланса. Всё большее количество людей выбирают удаленную работу и фриланс как основной или дополнительный источник дохода.
• Необходимость в специализированных платформах. Существующие платформы часто имеют перегруженный интерфейс или взимают высокие комиссии.
• Потребность в безопасном и удобном взаимодействии. Необходимы инструменты, которые обеспечивают прозрачность и защиту интересов обеих сторон.

Целью прохождения производственной практики является изучение процесса проектирования и разработки требований к веб-приложению для поиска исполнителей и заказчиков проектов, а также анализ технологических решений и архитектурных подходов для реализации данного проекта.

Практика проходила на базе ПОУЧ «Колледж менеджмента» с 25 октября 2025 г. по 15 ноября 2025 г. Общая продолжительность составила 108 учебных часов.

В рамках производственной практики были выполнены следующие задачи:

• Проведен анализ предметной области и изучены существующие решения для фриланс-рынка.
• Определены функциональные и нефункциональные требования к веб-приложению.
• Выбраны и обоснованы технологии и инструменты разработки.
• Спроектирована архитектура системы, включая структуру базы данных.
• Разработаны диаграммы процессов, данных и взаимодействия компонентов.
• Спроектирован пользовательский интерфейс и определена структура страниц.
• Определены подходы к реализации и план этапов разработки.

Результатом практики стал полный анализ требований и техническое проектирование веб-приложения CollabHub для поиска исполнителей и заказчиков проектов, а также выбор оптимальных технологических решений для его реализации.

1 АНАЛИЗ И РАЗРАБОТКА ТРЕБОВАНИЙ К ВЕБ-ПРИЛОЖЕНИЮ COLLABHUB

1.1 Назначение и область применения

Разрабатываемый программный продукт является веб-приложением «CollabHub» для поиска исполнителей и заказчиков проектов. Веб-приложение предназначено для создания платформы взаимодействия между заказчиками проектов и фрилансерами. Разрабатываемое приложение представляет собой веб-платформу, позволяющую:

• регистрироваться и авторизоваться в системе,
• создавать и просматривать проекты,
• подавать отклики на проекты,
• общаться через встроенную систему сообщений,
• управлять профилями и портфолио,
• оставлять отзывы и рейтинги.

Пользователями этого веб-приложения будут являться заказчики проектов, фрилансеры, компании, ищущие удаленных сотрудников, а также администраторы системы для модерации контента и управления платформой.

Область применения веб-приложения CollabHub включает:

• Поиск исполнителей для различных типов проектов: веб-разработка, дизайн, копирайтинг, маркетинг и др.
• Создание проектов с детальным описанием требований и сроков выполнения.
• Управление процессом отбора исполнителей через систему откликов.
• Организация коммуникации между заказчиками и исполнителями.
• Оценка качества выполненной работы через систему отзывов и рейтингов.

Веб-приложение CollabHub является универсальной платформой для фриланс-рынка, которая обеспечивает эффективное взаимодействие между всеми участниками процесса.

1.2 Постановка задачи

Разрабатываемое веб-приложение должно предоставлять функционал для поиска и взаимодействия между заказчиками и исполнителями проектов. Также в приложении нужно предусмотреть возможность создания проектов, подачи откликов, общения между участниками и оценки качества выполненной работы.

Исходя из вышеизложенного, приложение должно выполнять следующие задачи:

• иметь интуитивно понятный веб-интерфейс с адаптивным дизайном,
• предоставлять систему регистрации и авторизации пользователей с ролями (заказчик/фрилансер/администратор),
• обеспечивать создание, редактирование, просмотр и удаление проектов,
• предоставлять возможность подачи откликов на проекты и управления заявками,
• включать систему сообщений для общения между пользователями,
• предоставлять функционал оценки и отзывов за выполненные работы,
• обеспечивать управление профилями и портфолио пользователей,
• включать систему комментариев к проектам,
• предоставлять административные функции для модерации контента и управления системой.

Веб-приложение должно состоять из набора страниц и компонентов. На главной странице необходимо разместить каталог проектов с возможностью поиска и фильтрации, а также навигационное меню для доступа к различным разделам:
• просмотр и создание проектов,
• управление откликами,
• система сообщений,
• управление профилем.

При выборе проекта пользователь должен иметь возможность просмотреть детальную информацию и подать отклик (для фрилансеров) или управлять откликами (для заказчиков).

1.3 Анализ предметной области

В рамках анализа предметной области была изучена специфика фриланс-рынка и существующие платформы для поиска исполнителей и заказчиков проектов. Основные выводы:

Существующие решения и их недостатки:

1. Upwork – крупнейшая международная платформа:
   • Преимущества: большое количество пользователей, надежная система платежей
   • Недостатки: высокая комиссия (20% от первых $500), сложный процесс регистрации
   
2. Freelancer.com – глобальная фриланс-платформа:
   • Преимущества: многоязычный интерфейс, конкурсы
   • Недостатки: перегруженный интерфейс, высокие комиссии
   
3. FL.ru – российская платформа фрилансеров:
   • Преимущества: адаптирован под российский рынок
   • Недостатки: устаревший интерфейс, недостаточная защита пользователей

Ключевые требования к эффективной фриланс-платформе:

• Простота использования. Интуитивный интерфейс без избыточной функциональности.
• Прозрачность. Четкие условия работы и честная система комиссий.
• Безопасность. Защита данных пользователей и интеллектуальной собственности.
• Сообщество. Возможность построения долгосрочных рабочих отношений.
• Мобильность. Доступность с любых устройств.

На основе проведенного анализа была сформулирована концепция платформы CollabHub, направленная на устранение выявленных недостатков существующих решений.

1.4 Обоснование выбора программного обеспечения

Процесс разработки требует выбора необходимого технического и программного обеспечения.

Для проектирования диаграмм был использован интернет-сервис draw.io. Данный сервис имеет ряд преимуществ:

• возможность проектировать различные виды диаграмм с сохранением в облачном хранилище,
• большое количество шаблонов для проектирования диаграмм,
• экспорт в различные форматы (PNG, PDF, SVG).

В качестве языка программирования выбран Python с фреймворком FastAPI, так как он обеспечивает:
• высокую производительность благодаря асинхронной обработке запросов,
• простоту разработки API с автоматической генерацией документации,
• встроенную валидацию данных через Pydantic,
• поддержку современного веб-API стандартов.

Для фронтенда используется HTML5, CSS3 и JavaScript с фреймворком Tailwind CSS для создания современного адаптивного интерфейса. Tailwind CSS позволяет:
• быстро разрабатывать UI компоненты без написания большого объема CSS,
• создавать адаптивные интерфейсы для различных размеров экранов,
• обеспечивать консистентный дизайн через утилитарные классы.

Для работы с базой данных выбран SQLite, который обладает следующими преимуществами:
• не требует отдельного сервера БД,
• легковесный и встраиваемый,
• идеален для небольших и средних проектов,
• полная поддержка SQL и ACID транзакций.

Для разработки приложения используется интегрированная среда разработки Visual Studio Code, которая имеет следующие преимущества:

• поддержка множества языков программирования,
• встроенная поддержка Git для контроля версий,
• богатая экосистема расширений,
• встроенный терминал и отладчик.

Минимальные системные требования для работоспособности веб-приложения CollabHub:

• операционная система Windows 10/Linux/macOS,
• Python 3.8 и выше,
• процессор с тактовой частотой 2.0 ГГц и выше,
• оперативная память минимум 4 ГБ,
• объем свободного места на жестком диске не менее 1 ГБ,
• современный веб-браузер (Chrome, Firefox, Safari, Edge).

2 ПРОЕКТИРОВАНИЕ АРХИТЕКТУРЫ ВЕБ-ПРИЛОЖЕНИЯ

2.1 Проектирование причинно-следственной диаграммы

Причинно-следственная диаграмма – инструмент, позволяющий выявить наиболее существенные причины, влияющие на конечный результат. На рисунке 1 изображена причинно-следственная диаграмма веб-приложения CollabHub.

На данной диаграмме отражено, что веб-приложение CollabHub имеет два типа данных. Данные разделены на пользовательские и системные, субъектом является пользователь (заказчик, фрилансер или администратор).

Основные причинно-следственные связи в системе:

Пользовательские данные:
- Причина: Необходимость в выполнении проекта
  Следствие: Заказчик регистрируется в системе и создает проект с описанием требований
- Причина: Поиск работы и проектов
  Следствие: Фрилансер регистрируется в системе и создает профиль с портфолио
- Причина: Заинтересованность в конкретном проекте
  Следствие: Фрилансер подает отклик на проект с сопроводительным сообщением
- Причина: Необходимость общения в процессе работы
  Следствие: Использование системы сообщений между заказчиком и исполнителем
- Причина: Завершение проекта и оценка качества работы
  Следствие: Оставление отзывов и обновление рейтингов участников

Системные данные:
- Причина: Регистрация пользователей в системе
  Следствие: Создание учетных записей с ролями (заказчик/фрилансер/администратор)
- Причина: Создание проектов заказчиками
  Следствие: Формирование базы данных доступных проектов
- Причина: Подача откликов фрилансерами
  Следствие: Создание базы данных откликов и заявок
- Причина: Взаимодействие между пользователями
  Следствие: Генерация сообщений и истории переписки
- Причина: Оценка выполненной работы
  Следствие: Обновление рейтингов и статистики пользователей

Основные компоненты системы:

Пользовательские данные включают:
• Профили пользователей (заказчики и фрилансеры) с личной информацией, навыками и рейтингами
• Проекты с детальным описанием, требованиями, сроками и приоритетами
• Отклики и заявки на проекты с сопроводительными сообщениями
• Сообщения между пользователями в рамках проектов
• Отзывы и рейтинги за выполненную работу

Системные данные включают:
• Учетные записи пользователей с аутентификацией и авторизацией
• Статистику использования платформы и активности пользователей
• Логи системы для отслеживания действий и ошибок
• Настройки конфигурации веб-приложения
• Резервные копии данных для обеспечения надежности

Взаимодействие субъектов с данными:

Пользователь (заказчик, фрилансер или администратор) взаимодействует с веб-приложением через браузер, обращаясь к различным разделам системы. В зависимости от роли пользователя, система предоставляет соответствующий функционал:

- Заказчик создает проекты, просматривает отклики, выбирает исполнителей, общается с фрилансерами и оставляет отзывы
- Фрилансер просматривает доступные проекты, подает отклики, общается с заказчиками, выполняет работу и получает оценки
- Администратор модерирует контент, управляет проектами и комментариями, просматривает статистику системы

Система CollabHub обрабатывает все пользовательские запросы, обеспечивая безопасность данных и поддерживая целостность информации, предоставляет удобный интерфейс для взаимодействия между участниками фриланс-рынка.

2.2 Проектирование DFD-диаграмм первого и второго уровня

Для полного описания движения данных внутри приложения спроектированы DFD диаграммы первого и второго уровня.

DFD-диаграмма (диаграмма потока данных) – методология графического структурного анализа, описывающая внешние по отношению к системе источники и адресаты данных, логические функции, потоки данных и хранилища данных. Цель DFD представления – продемонстрировать, как каждый процесс преобразует свои входные данные в выходные, а также выявить отношения между этими процессами.

На рисунке 2 изображена DFD-диаграмма первого уровня веб-приложения CollabHub.

Пользователь взаимодействует с веб-интерфейсом, который обрабатывает запросы и взаимодействует с базой данных для получения и сохранения информации.

На рисунке 3 изображена DFD-диаграмма второго уровня веб-приложения CollabHub.

На данной диаграмме показано, что пользователь взаимодействует с веб-приложением через браузер, обращаясь к различным страницам и функциям приложения. Система обрабатывает запросы, взаимодействует с базой данных и файловой системой для получения и сохранения данных.

Основные процессы на втором уровне:

1. Аутентификация и авторизация
2. Управление проектами (создание, редактирование, просмотр, удаление)
3. Система откликов (подача, управление заявками)
4. Система сообщений (чат между пользователями)
5. Управление профилями (редактирование профиля, портфолио)
6. Система рейтингов и отзывов
7. Административные функции (модерация контента)

2.3 Проектирование UML-диаграмм стереотипов

UML (Unified Modeling Language) – язык графического описания для объектного моделирования в области разработки программного обеспечения. Используя UML, разработчики могут создавать диаграммы классов, диаграммы вариантов использования, диаграммы последовательностей и другие виды диаграмм.

UML-диаграммы стереотипов используются для создания новых элементов моделирования, получаемых из существующих, но имеющих определенные свойства, которые подходят для конкретной проблемы предметной области.

На рисунке 4 представлена UML-диаграмма стереотипов веб-приложения CollabHub.

На данной диаграмме показано, что пользователь может взаимодействовать со следующими основными компонентами системы:

• модуль управления проектами,
• модуль системы откликов,
• модуль системы сообщений,
• модуль управления профилями,
• модуль системы рейтингов и отзывов,
• модуль административных функций.

Каждый модуль имеет свои специфические функции и взаимодействует с другими компонентами системы для обеспечения полного функционала платформы.

2.4 Проектирование прототипа пользовательского интерфейса

Прототип – модель, прообраз конечного продукта. Для описания прототипа веб-приложения CollabHub выбрана интерактивная модель. Интерактивный прототип представляет собой схематичное изображение пользовательского интерфейса с возможностью взаимодействия.

На рисунке 5 представлен прототип главной страницы веб-приложения CollabHub.

Проектирование пользовательского интерфейса включает разработку следующих ключевых страниц:

• Главная страница с каталогом проектов и фильтрами
• Страница регистрации и авторизации
• Страница создания проекта
• Страница детального просмотра проекта
• Страница управления откликами
• Страница системы сообщений
• Страница профиля пользователя
• Страница администрирования (для администраторов)

Дизайн интерфейса основан на принципах Material Design и адаптивного дизайна, обеспечивая удобство использования на различных устройствах.

3 ПРОЕКТИРОВАНИЕ БАЗЫ ДАННЫХ ДЛЯ ВЕБ-ПРИЛОЖЕНИЯ

3.1 Анализ требований к базе данных

Для веб-приложения CollabHub необходимо спроектировать базу данных, которая будет хранить информацию о пользователях, проектах, откликах, сообщениях, отзывах и комментариях.

Основные сущности системы:

• Пользователи (Users) – заказчики, фрилансеры и администраторы
• Проекты (Jobs) – создаваемые заказчиками проекты
• Отклики (Applications) – заявки фрилансеров на проекты
• Сообщения (Messages) – переписка между пользователями
• Отзывы (Reviews) – оценки выполненных работ
• Комментарии (ProjectComments) – комментарии к проектам

Требования к базе данных:

• Нормализация данных для исключения дублирования информации
• Обеспечение целостности данных через внешние ключи
• Индексирование для повышения производительности запросов
• Безопасное хранение паролей через хеширование
• Поддержка транзакций для обеспечения согласованности данных

3.2 Проектирование структуры базы данных

Для веб-приложения CollabHub была спроектирована реляционная база данных SQLite, включающая следующие основные таблицы:

• Users – таблица пользователей (заказчики, фрилансеры и администраторы)
• Jobs – таблица проектов
• Applications – таблица откликов на проекты
• Messages – таблица сообщений между пользователями
• Reviews – таблица отзывов и рейтингов
• ProjectComments – таблица комментариев к проектам

Схема базы данных обеспечивает нормализацию данных и исключает дублирование информации.

Структура таблицы Users:
- id (INTEGER, PRIMARY KEY)
- email (TEXT, UNIQUE, NOT NULL)
- password (TEXT, NOT NULL)
- role (TEXT, CHECK: 'client', 'freelancer', 'admin')
- name (TEXT)
- avatar (TEXT)
- about_me (TEXT)
- activity (TEXT)
- skills (TEXT)
- rating (REAL, DEFAULT 0.0)
- completed_projects (INTEGER, DEFAULT 0)
- phone (TEXT)
- telegram (TEXT)
- portfolio_files (TEXT)
- portfolio_links (TEXT)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)

Структура таблицы Jobs:
- id (INTEGER, PRIMARY KEY)
- title (TEXT, NOT NULL)
- description (TEXT, NOT NULL)
- deadline (TEXT, NOT NULL)
- status (TEXT, NOT NULL)
- creator_email (TEXT, NOT NULL)
- priority (TEXT, DEFAULT 'medium')
- files (TEXT)

Структура таблицы Applications:
- id (INTEGER, PRIMARY KEY)
- job_id (INTEGER, NOT NULL, FOREIGN KEY)
- freelancer_email (TEXT, NOT NULL, FOREIGN KEY)
- status (TEXT, DEFAULT 'pending')

Структура таблицы Messages:
- id (INTEGER, PRIMARY KEY)
- sender_email (TEXT, NOT NULL, FOREIGN KEY)
- receiver_email (TEXT, NOT NULL, FOREIGN KEY)
- job_id (INTEGER, FOREIGN KEY)
- message (TEXT, NOT NULL)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)
- is_read (BOOLEAN, DEFAULT FALSE)

Структура таблицы Reviews:
- id (INTEGER, PRIMARY KEY)
- job_id (INTEGER, NOT NULL, FOREIGN KEY)
- freelancer_email (TEXT, NOT NULL, FOREIGN KEY)
- client_email (TEXT, NOT NULL, FOREIGN KEY)
- rating (INTEGER, CHECK 1-5)
- comment (TEXT)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)

Структура таблицы ProjectComments:
- id (INTEGER, PRIMARY KEY)
- job_id (INTEGER, NOT NULL, FOREIGN KEY)
- user_email (TEXT, NOT NULL, FOREIGN KEY)
- comment (TEXT, NOT NULL)
- created_at (DATETIME, DEFAULT CURRENT_TIMESTAMP)

3.3 Выбор технологии для работы с базой данных

Для работы с базой данных выбран SQLite в сочетании с библиотекой для Python. SQLite обладает следующими преимуществами:

• не требует отдельного сервера базы данных
• легковесный и встраиваемый
• полная поддержка SQL стандарта
• ACID транзакции для обеспечения целостности данных
• идеально подходит для веб-приложений среднего масштаба

Для работы с базой данных будут созданы функции:

• get_connection() – получение соединения с БД
• init_db() – инициализация таблиц
• Функции для работы с пользователями (CRUD операции)
• Функции для работы с проектами (CRUD операции)
• Функции для работы с откликами, сообщениями, отзывами и комментариями

Все функции работы с базой данных будут изолированы в отдельном модуле models.py для обеспечения чистоты архитектуры приложения.

4 ТЕХНИЧЕСКОЕ ОБЕСПЕЧЕНИЕ РЕАЛИЗАЦИИ ПРОЕКТА

4.1 Выбор технологий разработки

Для реализации веб-приложения CollabHub выбран следующий технологический стек:

Backend:
• Python 3.8+ – язык программирования
• FastAPI – веб-фреймворк для создания API
• SQLite – база данных
• Jinja2 – шаблонизатор для генерации HTML
• Pydantic – валидация данных
• Uvicorn – ASGI сервер

Frontend:
• HTML5 – структура страниц
• CSS3 с Tailwind CSS – стилизация
• JavaScript (Vanilla) – интерактивность
• Fetch API – асинхронные запросы к серверу

Инструменты разработки:
• Visual Studio Code – IDE
• Git – система контроля версий
• Docker – контейнеризация (опционально)

Обоснование выбора технологий:

Python и FastAPI обеспечивают быструю разработку и высокую производительность. SQLite подходит для проекта среднего масштаба без необходимости в отдельном сервере БД. Tailwind CSS позволяет быстро создавать адаптивный UI без написания большого объема CSS кода.

4.2 Архитектурные решения

Архитектура веб-приложения CollabHub построена на следующих принципах:

• Модульность – код разделен на логические модули (аутентификация, проекты, отклики, сообщения)
• Миниатюрность – минимальная сложность, только необходимый функционал
• Безопасность – хеширование паролей, JWT токены, защита от SQL-инъекций
• Производительность – индексы в БД, асинхронная обработка запросов
• Масштабируемость – возможность расширения функционала без переделки архитектуры

Структура проекта:

```
app/
├── main.py              # Главный файл приложения
├── database.py          # Работа с базой данных
├── models.py            # Модели и функции для работы с данными
├── utils.py             # Вспомогательные функции
├── constants.py         # Константы
├── templates/           # HTML шаблоны
├── static/
│   ├── css/            # Стили
│   ├── js/             # JavaScript
│   └── icons/          # Иконки
└── uploads/            # Загруженные файлы
```

4.3 Планирование этапов реализации

Реализация проекта планируется в следующие этапы:

Этап 1: Подготовка (2 дня)
• Настройка окружения разработки
• Инициализация проекта
• Создание базовой структуры

Этап 2: База данных (3 дня)
• Проектирование и создание таблиц
• Реализация функций для работы с БД
• Создание тестовых данных

Этап 3: Backend разработка (10 дней)
• Реализация аутентификации и авторизации
• Разработка API для проектов
• Разработка API для откликов, сообщений, отзывов
• Реализация административных функций

Этап 4: Frontend разработка (8 дней)
• Создание HTML шаблонов
• Разработка CSS стилей
• Реализация JavaScript функционала
• Создание адаптивного дизайна

Этап 5: Интеграция и тестирование (3 дня)
• Интеграция всех компонентов
• Функциональное тестирование
• Исправление обнаруженных ошибок

Этап 6: Развертывание (2 дня)
• Настройка продакшн окружения
• Деплой на хостинг
• Финальное тестирование

ЗАКЛЮЧЕНИЕ

В ходе производственной практики была проведена полная аналитическая работа по проектированию веб-приложения CollabHub для поиска исполнителей и заказчиков проектов. 

Основные достижения:

• Проведен анализ предметной области и изучены существующие решения для фриланс-рынка
• Определены все функциональные и нефункциональные требования к системе
• Выбраны и обоснованы оптимальные технологии разработки
• Спроектирована архитектура системы и структура базы данных
• Разработаны диаграммы процессов, данных и взаимодействия компонентов
• Спроектирован пользовательский интерфейс и определена структура страниц
• Составлен план этапов реализации проекта

В результате был создан полный технический проект веб-приложения с подробным описанием всех компонентов, архитектурных решений и технологических подходов к реализации.

Полученный опыт в области проектирования веб-приложений и выбора технологических решений будет полезен для дальнейшей профессиональной деятельности в сфере информационных систем и программирования.

(Дата: ___________)
(Подпись: _________)

СПИСК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ

1. Климов А. А. Веб-разработка на Python и FastAPI: практический курс / А. А. Климов. – Москва : ДМК Пресс, 2023
2. Элмасри Р., Наватх Ш. Базы данных. Основы проектирования, реализации и сопровождения / Р. Элмасри, Ш. Наватх. – Санкт-Петербург : Питер, 2022
3. Хиллард Д. FastAPI: современный Python для веб-разработки / Д. Хиллард. – Москва : О'Рейли, 2024
4. Глушаков Е. П. Архитектура клиент-серверных приложений на Python / Е. П. Глушаков. – Москва : Наука и Техника, 2023
5. Python Software Foundation. Python 3.11 Documentation [Электронный ресурс]. – Режим доступа: https://docs.python.org/3.11/ (дата обращения: 25.10.2025)
6. FastAPI Framework. FastAPI Documentation [Электронный ресурс]. – Режим доступа: https://fastapi.tiangolo.com/ (дата обращения: 25.10.2025)

ПРИЛОЖЕНИЕ

Приложение содержит дополнительные материалы по проектированию веб-приложения CollabHub: диаграммы процессов, схемы базы данных, макеты пользовательского интерфейса.

